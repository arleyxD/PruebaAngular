quiero que cuando le de click al modulo me aparezca debajo un menu de submenu que corresponda al modulo 
cuando le de click al submodulo me redira a las paginas que correspondan 

y quedaria en http://localhost:4200/motor/"nombreSubmodulo"

mi codigo 
<nav class="navbar navbar-expand-lg navbar-light custom-bg">
    <div class="container-fluid">
        <div class="d-flex align-items-center">
            <a class="navbar-brand" href="#">
                <img src="../../../../../../assets/logo.png" alt="Santander" width="150" height="30">
            </a>
            <h3 class="ms-2 mb-0 h3-bordered">Grandes Exposiciones</h3>
        </div>
        <div class="collapse navbar-collapse justify-content-end" id="navbarNav">
            <ul class="navbar-nav">
                <li class="nav-item">
                    <a class="nav-link" href="#">
                        <span class="badge ">{{ usuario?.nombre || 'Usuario' }}</span>
                    </a>
                </li>   
            </ul>
        </div>
    </div>
  </nav>

<nav class="menu p-0">

<ul class="submenu-list" *ngIf="selectedModulo">
  <li *ngFor="let submodule of selectedModulo.submodulos" class="submenu-item" [class.selected]="submodule.selected" (click)="selectSubmenu(submodule, $event)">
    {{ submodule.nombre }}
  </li>
</ul>

<nav class="menu p-0">
  <ul class="menu-list">
    <li *ngFor="let module of modulosLista" class="menu-item">
      <span class="menu-title">{{ module.nombre }}</span>
    </li>
  </ul>
  <div *ngIf="error" class="error">
    {{ error }}
  </div>
</nav>

<ul class="submenu-list" *ngIf="selectedModulo">
  <li *ngFor="let submodule of selectedModulo.submodulos" class="submenu-item" [class.selected]="submodule.selected" (click)="selectSubmenu(submodule, $event)">
    {{ submodule.nombre }}
  </li>
</ul>
import { Component, OnInit } from '@angular/core';
import { UserService } from '../../services/header/user.service';
import { CommonModule } from '@angular/common';
import { ModuloService } from 'src/app/components/features/feature2/services/modulo/modulo.service';
import { catchError, of } from 'rxjs';
import { Modulo } from '../../model/modulo.model';
import { role, usuario, modulosLista, submodulosLista } from '../../model/user.model';

@Component({
  selector: 'app-header',
  standalone: true,
  imports: [CommonModule],
  templateUrl: './header.component.html',
  styleUrls: ['./header.component.css']
})
export class HeaderComponent implements OnInit {
    usuario!: usuario ;
    role!: role;
    modulos: Modulo[] = [];
    modulosLista: modulosLista[] =[];
    error: string | null = null;
    // Modulo seleccionado
    selectedModulo: Modulo | null = null;

  constructor(private userService: UserService,
    private moduloService: ModuloService
  ) {}

  ngOnInit(): void {
    // Asegura que usuario esté autenticado antes de hacer la solicitud
    const token = localStorage.getItem('token');
    if (token) {
          this.userService.getUserInfo().subscribe(data => {
            this.usuario = data;
            console.log(this.usuario);
            this.userService.getRoleInfo(this.usuario.roleId).subscribe(data => {
              // Ordenar los submódulos por ID
              this.role = data;
              this.modulosLista = this.role.modulosLista
             console.log(this.modulosLista);
            });
          });

          
              
          this.moduloService.getModulos().pipe(
            catchError(error => {
              this.error = 'Error al obtener los módulos';
              return of([]); // Retorna un array vacío en caso de error
            })
          ).subscribe(data => {
            // Ordenar los submódulos por ID
            data.forEach(modulo => {
              modulo.submodulos.sort((a, b) => a.id - b.id);
            });
            this.modulos = data;
          });

        } else {
          this.error = 'Usuario no autenticado';
        }
  }

  

  // Métodos para manejar la visibilidad del submenú y la selección del submenú
  selectModulo(module: Modulo) {
    this.selectedModulo = module === this.selectedModulo ? null : module;
    this.clearModuloSelection();
    if (this.selectedModulo) {
      this.selectedModulo.selected = true;
    }
  }

  selectSubmenu(submodule: any, event: Event) {
    event.stopPropagation(); // Previene que el click se propague al módulo y cierre el submenú
    this.clearSubmenuSelection();
    submodule.selected = true;
  }

  clearModuloSelection() {
    this.modulos.forEach(module => {
      module.selected = false;
    });
  }

  clearSubmenuSelection() {
    this.modulos.forEach(module => {
      module.submodulos.forEach(submodule => {
        submodule.selected = false;
      });
    });
  }
}
